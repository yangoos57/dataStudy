# DFS # 완전탐색 # 이코테

# 음료수 얼려먹기 문제 해결 방식
# 1.얼음틀의 모든 영역을 스캔할 수 있는 반복문을 만든다.
# 2.채울 수 없는 영역으로 판단되면 넘어가고 채울 수 있는 영역이라 판단되면 DFS 알고리즘을 시작한다.
# 3.DFS는 완전탐색 유형이다. 인근 모든 영역을 방문해서 채울 수 있는 영역이 없을 때 까지 무한 확장한다.
# 4.무한 확장이 끝나고 난 뒤 다시 개별 영역을 해 채울 수 있는 영역을 확인으로 들어간다.

n, m = 4, 5
graph = [
    [1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 0, 0],
    [1, 0, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 0],
]


def dfs(a, b):
    # 빈공간이 식별 된 경우 빈공간이 사라질때까지 dfs 수행

    # 얼음틀 밖을 넘어가서는 안되므로 조건 설정
    if a > n or a < 1 or b < m or b < 1:
        return False
    # 빈공간이 식별되면 모든 영역 완전탐색 시작
    # 0이 모두 1로 될때까지 재귀함수 호출
    elif graph[a][b] == 0:
        graph[a][b] = 1
        dfs(a, b + 1)  # 상
        dfs(a, b - 1)  # 하
        dfs(a - 1, b)  # 좌
        dfs(a + 1, b)  # 우
        # 재귀함수는 처음 시작한 함수가 맨 마지막으로 끝나므로 모든 재귀함수가 끝나고 나면 return True로 넘어간다.
        # 따라서 이문제에서 재귀함수의 Bool 값은 신경쓰지 않아도 된다.
        return True
    # 얼음틀 밖도 아니고, 0도 아닌 경우 채울 수 없는 영역이므로 False 반환
    return False


result = 0
# 모든 얼음틀을 점검해서 빈공간이 있는지 찾는다.
for i in range(1, n + 1):
    for j in range(1, m + 1):
        # 빈공간(0)이 존재하면 빈공간 개수를 count up한다.
        if dfs(i, j) == True:
            result += 1
